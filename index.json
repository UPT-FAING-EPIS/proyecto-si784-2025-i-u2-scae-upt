{
  "Cobertura/SummaryGithub.html": {
    "href": "Cobertura/SummaryGithub.html",
    "title": "Summary | SCAEupt App",
    "summary": "Summary Summary Generated on: 06/13/2025 - 01:14:44 Coverage date: 06/12/2025 - 23:56:16 - 06/13/2025 - 01:14:42 Parser: MultiReport (14x Cobertura) Assemblies: 1 Classes: 8 Files: 12 Line coverage: 80.1% (592 of 739) Covered lines: 592 Uncovered lines: 147 Coverable lines: 739 Total lines: 1170 Branch coverage: 64.9% (74 of 114) Covered branches: 74 Total branches: 114 Method coverage: Feature is only available for sponsors Coverage pyWeb_ScaeUPT - 80.1% Name Line Branch pyWeb_ScaeUPT 80.1% 64.9% Program 96.5% 75% pyWeb_ScaeUPT.Controllers.AuthController 88.3% 68.7% pyWeb_ScaeUPT.Controllers.GoogleAuthRequest 100% pyWeb_ScaeUPT.Controllers.GoogleTokenPayload 89.6% pyWeb_ScaeUPT.Controllers.HomeController 66.5% 58.6% pyWeb_ScaeUPT.Data.ApplicationDbContext 100% pyWeb_ScaeUPT.Models.estudianteModel 100% pyWeb_ScaeUPT.Models.tokenModel 100%"
  },
  "docs/pyWeb_ScaeUPT.Controllers.AuthController.html": {
    "href": "docs/pyWeb_ScaeUPT.Controllers.AuthController.html",
    "title": "Class AuthController | SCAEupt App",
    "summary": "Class AuthController Namespace pyWeb_ScaeUPT.Controllers Assembly pyWeb_ScaeUPT.dll [ApiController] [Route(\"api/[controller]\")] public class AuthController : ControllerBase Inheritance object ControllerBase AuthController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthController(IConfiguration, ApplicationDbContext, ILogger<AuthController>, IHttpClientFactory) public AuthController(IConfiguration configuration, ApplicationDbContext dbContext, ILogger<AuthController> logger, IHttpClientFactory httpClientFactory) Parameters configuration IConfiguration dbContext ApplicationDbContext logger ILogger<AuthController> httpClientFactory IHttpClientFactory Methods Google(GoogleAuthRequest) [HttpPost(\"google\")] public Task<IActionResult> Google(GoogleAuthRequest request) Parameters request GoogleAuthRequest Returns Task<IActionResult> ValidateToken() [HttpGet(\"validate\")] [Authorize] public IActionResult ValidateToken() Returns IActionResult"
  },
  "docs/pyWeb_ScaeUPT.Controllers.GoogleAuthRequest.html": {
    "href": "docs/pyWeb_ScaeUPT.Controllers.GoogleAuthRequest.html",
    "title": "Class GoogleAuthRequest | SCAEupt App",
    "summary": "Class GoogleAuthRequest Namespace pyWeb_ScaeUPT.Controllers Assembly pyWeb_ScaeUPT.dll public class GoogleAuthRequest Inheritance object GoogleAuthRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IdToken public string IdToken { get; set; } Property Value string"
  },
  "docs/pyWeb_ScaeUPT.Controllers.GoogleTokenPayload.html": {
    "href": "docs/pyWeb_ScaeUPT.Controllers.GoogleTokenPayload.html",
    "title": "Class GoogleTokenPayload | SCAEupt App",
    "summary": "Class GoogleTokenPayload Namespace pyWeb_ScaeUPT.Controllers Assembly pyWeb_ScaeUPT.dll public class GoogleTokenPayload Inheritance object GoogleTokenPayload Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Aud public string Aud { get; set; } Property Value string Azp public string Azp { get; set; } Property Value string Email public string Email { get; set; } Property Value string EmailVerified public bool EmailVerified { get; set; } Property Value bool Exp public string Exp { get; set; } Property Value string FamilyName public string FamilyName { get; set; } Property Value string GivenName public string GivenName { get; set; } Property Value string Iat public string Iat { get; set; } Property Value string Iss public string Iss { get; set; } Property Value string Name public string Name { get; set; } Property Value string Picture public string Picture { get; set; } Property Value string Sub public string Sub { get; set; } Property Value string"
  },
  "docs/pyWeb_ScaeUPT.Controllers.HomeController.html": {
    "href": "docs/pyWeb_ScaeUPT.Controllers.HomeController.html",
    "title": "Class HomeController | SCAEupt App",
    "summary": "Class HomeController Namespace pyWeb_ScaeUPT.Controllers Assembly pyWeb_ScaeUPT.dll [ApiController] [Route(\"api/[controller]\")] public class HomeController : ControllerBase Inheritance object ControllerBase HomeController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HomeController(ILogger<HomeController>, ApplicationDbContext) public HomeController(ILogger<HomeController> logger, ApplicationDbContext dbContext) Parameters logger ILogger<HomeController> dbContext ApplicationDbContext Methods GenerateQR() [HttpPost(\"generate-qr\")] [Authorize] public IActionResult GenerateQR() Returns IActionResult Get() [HttpGet] public IActionResult Get() Returns IActionResult GetEstudiante(int) [HttpGet(\"estudiante/{id}\")] public IActionResult GetEstudiante(int id) Parameters id int Returns IActionResult GetUserInfo() [HttpGet(\"user-info\")] [Authorize] public IActionResult GetUserInfo() Returns IActionResult"
  },
  "docs/pyWeb_ScaeUPT.Controllers.html": {
    "href": "docs/pyWeb_ScaeUPT.Controllers.html",
    "title": "Namespace pyWeb_ScaeUPT.Controllers | SCAEupt App",
    "summary": "Namespace pyWeb_ScaeUPT.Controllers Classes AuthController GoogleAuthRequest GoogleTokenPayload HomeController"
  },
  "docs/pyWeb_ScaeUPT.Data.ApplicationDbContext.html": {
    "href": "docs/pyWeb_ScaeUPT.Data.ApplicationDbContext.html",
    "title": "Class ApplicationDbContext | SCAEupt App",
    "summary": "Class ApplicationDbContext Namespace pyWeb_ScaeUPT.Data Assembly pyWeb_ScaeUPT.dll public class ApplicationDbContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext ApplicationDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.OnModelCreating(ModelBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApplicationDbContext(DbContextOptions<ApplicationDbContext>) public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) Parameters options DbContextOptions<ApplicationDbContext> Properties estudiante public DbSet<estudianteModel> estudiante { get; set; } Property Value DbSet<estudianteModel> token public DbSet<tokenModel> token { get; set; } Property Value DbSet<tokenModel>"
  },
  "docs/pyWeb_ScaeUPT.Data.html": {
    "href": "docs/pyWeb_ScaeUPT.Data.html",
    "title": "Namespace pyWeb_ScaeUPT.Data | SCAEupt App",
    "summary": "Namespace pyWeb_ScaeUPT.Data Classes ApplicationDbContext"
  },
  "docs/pyWeb_ScaeUPT.Models.estudianteModel.html": {
    "href": "docs/pyWeb_ScaeUPT.Models.estudianteModel.html",
    "title": "Class estudianteModel | SCAEupt App",
    "summary": "Class estudianteModel Namespace pyWeb_ScaeUPT.Models Assembly pyWeb_ScaeUPT.dll [Table(\"tbestudiante\")] public class estudianteModel Inheritance object estudianteModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Correo public string Correo { get; set; } Property Value string Id_Estudiante [Key] public int Id_Estudiante { get; set; } Property Value int Id_Persona public string Id_Persona { get; set; } Property Value string Matricula public string Matricula { get; set; } Property Value string Semestre public int Semestre { get; set; } Property Value int"
  },
  "docs/pyWeb_ScaeUPT.Models.html": {
    "href": "docs/pyWeb_ScaeUPT.Models.html",
    "title": "Namespace pyWeb_ScaeUPT.Models | SCAEupt App",
    "summary": "Namespace pyWeb_ScaeUPT.Models Classes estudianteModel tokenModel"
  },
  "docs/pyWeb_ScaeUPT.Models.tokenModel.html": {
    "href": "docs/pyWeb_ScaeUPT.Models.tokenModel.html",
    "title": "Class tokenModel | SCAEupt App",
    "summary": "Class tokenModel Namespace pyWeb_ScaeUPT.Models Assembly pyWeb_ScaeUPT.dll [Table(\"tbtoken\")] public class tokenModel Inheritance object tokenModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DNI_token public string DNI_token { get; set; } Property Value string Id_codigoqr [Key] public int Id_codigoqr { get; set; } Property Value int Token public string Token { get; set; } Property Value string"
  },
  "docs/pyWeb_ScaeUPT.Tests.Controllers.AuthControllerTests.html": {
    "href": "docs/pyWeb_ScaeUPT.Tests.Controllers.AuthControllerTests.html",
    "title": "Class AuthControllerTests | SCAEupt App",
    "summary": "Class AuthControllerTests Namespace pyWeb_ScaeUPT.Tests.Controllers Assembly pyWeb_ScaeUPT.Tests.dll public class AuthControllerTests : IDisposable Inheritance object AuthControllerTests Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthControllerTests() public AuthControllerTests() Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Google_InvalidDomain_ReturnsBadRequest() [Fact] public Task Google_InvalidDomain_ReturnsBadRequest() Returns Task Google_InvalidToken_ReturnsBadRequest() [Fact] public Task Google_InvalidToken_ReturnsBadRequest() Returns Task Google_ValidToken_ReturnsOkWithJWT() [Fact] public Task Google_ValidToken_ReturnsOkWithJWT() Returns Task ValidateToken_ReturnsOk() [Fact] public void ValidateToken_ReturnsOk()"
  },
  "docs/pyWeb_ScaeUPT.Tests.Controllers.HomeControllerTests.html": {
    "href": "docs/pyWeb_ScaeUPT.Tests.Controllers.HomeControllerTests.html",
    "title": "Class HomeControllerTests | SCAEupt App",
    "summary": "Class HomeControllerTests Namespace pyWeb_ScaeUPT.Tests.Controllers Assembly pyWeb_ScaeUPT.Tests.dll public class HomeControllerTests : IDisposable Inheritance object HomeControllerTests Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HomeControllerTests() public HomeControllerTests() Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() GenerateQR_ValidUser_ReturnsOk() [Fact] public void GenerateQR_ValidUser_ReturnsOk() GetEstudiante_ExistingId_ReturnsOk() [Fact] public void GetEstudiante_ExistingId_ReturnsOk() GetEstudiante_NonExistingId_ReturnsNotFound() [Fact] public void GetEstudiante_NonExistingId_ReturnsNotFound() GetUserInfo_InvalidUserId_ReturnsBadRequest() [Fact] public void GetUserInfo_InvalidUserId_ReturnsBadRequest() GetUserInfo_ValidUser_ReturnsOk() [Fact] public void GetUserInfo_ValidUser_ReturnsOk() Get_ReturnsOkWithMessage() [Fact] public void Get_ReturnsOkWithMessage()"
  },
  "docs/pyWeb_ScaeUPT.Tests.Controllers.html": {
    "href": "docs/pyWeb_ScaeUPT.Tests.Controllers.html",
    "title": "Namespace pyWeb_ScaeUPT.Tests.Controllers | SCAEupt App",
    "summary": "Namespace pyWeb_ScaeUPT.Tests.Controllers Classes AuthControllerTests HomeControllerTests"
  },
  "docs/pyWeb_ScaeUPT.Tests.Data.ApplicationDbContextTests.html": {
    "href": "docs/pyWeb_ScaeUPT.Tests.Data.ApplicationDbContextTests.html",
    "title": "Class ApplicationDbContextTests | SCAEupt App",
    "summary": "Class ApplicationDbContextTests Namespace pyWeb_ScaeUPT.Tests.Data Assembly pyWeb_ScaeUPT.Tests.dll public class ApplicationDbContextTests Inheritance object ApplicationDbContextTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ApplicationDbContext_CanAddAndRetrieveEstudiante() [Fact] public void ApplicationDbContext_CanAddAndRetrieveEstudiante() ApplicationDbContext_CanAddAndRetrieveToken() [Fact] public void ApplicationDbContext_CanAddAndRetrieveToken()"
  },
  "docs/pyWeb_ScaeUPT.Tests.Data.html": {
    "href": "docs/pyWeb_ScaeUPT.Tests.Data.html",
    "title": "Namespace pyWeb_ScaeUPT.Tests.Data | SCAEupt App",
    "summary": "Namespace pyWeb_ScaeUPT.Tests.Data Classes ApplicationDbContextTests"
  },
  "docs/pyWeb_ScaeUPT.Tests.Integration.IntegrationTests.html": {
    "href": "docs/pyWeb_ScaeUPT.Tests.Integration.IntegrationTests.html",
    "title": "Class IntegrationTests | SCAEupt App",
    "summary": "Class IntegrationTests Namespace pyWeb_ScaeUPT.Tests.Integration Assembly pyWeb_ScaeUPT.Tests.dll public class IntegrationTests : IClassFixture<WebApplicationFactory<Program>> Inheritance object IntegrationTests Implements IClassFixture<WebApplicationFactory<Program>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IntegrationTests(WebApplicationFactory<Program>) public IntegrationTests(WebApplicationFactory<Program> factory) Parameters factory WebApplicationFactory<Program> Methods Get_EstudianteEndpoint_ReturnsNotFoundForInvalidId() [Fact] public Task Get_EstudianteEndpoint_ReturnsNotFoundForInvalidId() Returns Task Get_EstudianteEndpoint_ReturnsSuccessForValidId() [Fact] public Task Get_EstudianteEndpoint_ReturnsSuccessForValidId() Returns Task Get_HomeEndpoint_ReturnsSuccessAndCorrectContentType() [Fact] public Task Get_HomeEndpoint_ReturnsSuccessAndCorrectContentType() Returns Task Get_ValidateToken_ReturnsUnauthorizedWithoutToken() [Fact] public Task Get_ValidateToken_ReturnsUnauthorizedWithoutToken() Returns Task Post_AuthGoogle_ReturnsBadRequestForInvalidToken() [Fact] public Task Post_AuthGoogle_ReturnsBadRequestForInvalidToken() Returns Task"
  },
  "docs/pyWeb_ScaeUPT.Tests.Integration.html": {
    "href": "docs/pyWeb_ScaeUPT.Tests.Integration.html",
    "title": "Namespace pyWeb_ScaeUPT.Tests.Integration | SCAEupt App",
    "summary": "Namespace pyWeb_ScaeUPT.Tests.Integration Classes IntegrationTests"
  },
  "docs/pyWeb_ScaeUPT.Tests.Models.ModelTests.html": {
    "href": "docs/pyWeb_ScaeUPT.Tests.Models.ModelTests.html",
    "title": "Class ModelTests | SCAEupt App",
    "summary": "Class ModelTests Namespace pyWeb_ScaeUPT.Tests.Models Assembly pyWeb_ScaeUPT.Tests.dll public class ModelTests Inheritance object ModelTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods EstudianteModel_Properties_SetCorrectly() [Fact] public void EstudianteModel_Properties_SetCorrectly() EstudianteModel_ValidData_PassesValidation() [Fact] public void EstudianteModel_ValidData_PassesValidation() TokenModel_Properties_SetCorrectly() [Fact] public void TokenModel_Properties_SetCorrectly() TokenModel_ValidData_PassesValidation() [Fact] public void TokenModel_ValidData_PassesValidation()"
  },
  "docs/pyWeb_ScaeUPT.Tests.Models.html": {
    "href": "docs/pyWeb_ScaeUPT.Tests.Models.html",
    "title": "Namespace pyWeb_ScaeUPT.Tests.Models | SCAEupt App",
    "summary": "Namespace pyWeb_ScaeUPT.Tests.Models Classes ModelTests"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | SCAEupt App",
    "summary": "This is the HOMEPAGE. Reporte Cobertura HTML Reporte Cobertura Markdown Reporte de Mutaciones Documentacion de Clases, atributos y métodos Diagrama de Clases"
  },
  "pyWeb_ScaeUPT/wwwroot/lib/jquery-validation/LICENSE.html": {
    "href": "pyWeb_ScaeUPT/wwwroot/lib/jquery-validation/LICENSE.html",
    "title": "The MIT License (MIT) | SCAEupt App",
    "summary": "The MIT License (MIT) Copyright Jörn Zaefferer Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  }
}