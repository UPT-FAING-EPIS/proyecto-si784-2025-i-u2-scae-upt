// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace pyWeb_ScaeUPT.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GeneracionDeCodigoQRParaEstudiantesFeature : object, Xunit.IClassFixture<GeneracionDeCodigoQRParaEstudiantesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GeneracionCodigoQR.feature"
#line hidden
        
        public GeneracionDeCodigoQRParaEstudiantesFeature(GeneracionDeCodigoQRParaEstudiantesFeature.FixtureData fixtureData, pyWeb_ScaeUPT_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("es"), "Features", "Generación de Código QR para Estudiantes", "  Como un estudiante autenticado con correo institucional\r\n  Quiero generar mi có" +
                    "digo QR personal\r\n  Para poder acceder a las instalaciones universitarias", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
  #line hidden
#line 8
    testRunner.Given("que soy un estudiante registrado con DNI \"12345678\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 9
    testRunner.And("mi matrícula es \"2021001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Y ");
#line hidden
#line 10
    testRunner.And("mi correo es \"estudiante@virtual.upt.pe\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Y ");
#line hidden
#line 11
    testRunner.And("he iniciado sesión correctamente", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Y ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generación exitosa de código QR por primera vez")]
        [Xunit.TraitAttribute("FeatureTitle", "Generación de Código QR para Estudiantes")]
        [Xunit.TraitAttribute("Description", "Generación exitosa de código QR por primera vez")]
        public void GeneracionExitosaDeCodigoQRPorPrimeraVez()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generación exitosa de código QR por primera vez", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 14
    testRunner.When("solicito generar mi código QR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Cuando ");
#line hidden
#line 15
    testRunner.Then("debería recibir un código QR válido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entonces ");
#line hidden
#line 16
    testRunner.And("el código QR debería contener mis datos encriptados", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Y ");
#line hidden
#line 17
    testRunner.And("debería guardarse un token en la base de datos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Y ");
#line hidden
#line 18
    testRunner.And("la respuesta debería incluir la fecha y hora actual de Lima", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Y ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Regeneración de código QR existente")]
        [Xunit.TraitAttribute("FeatureTitle", "Generación de Código QR para Estudiantes")]
        [Xunit.TraitAttribute("Description", "Regeneración de código QR existente")]
        public void RegeneracionDeCodigoQRExistente()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Regeneración de código QR existente", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 21
    testRunner.Given("que ya tengo un código QR generado previamente", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 22
    testRunner.When("solicito generar mi código QR nuevamente", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Cuando ");
#line hidden
#line 23
    testRunner.Then("debería recibir un nuevo código QR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entonces ");
#line hidden
#line 24
    testRunner.And("el token anterior debería ser actualizado en la base de datos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Y ");
#line hidden
#line 25
    testRunner.And("el nuevo código QR debería tener una nueva marca de tiempo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Y ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generación de código QR con usuario no válido")]
        [Xunit.TraitAttribute("FeatureTitle", "Generación de Código QR para Estudiantes")]
        [Xunit.TraitAttribute("Description", "Generación de código QR con usuario no válido")]
        public void GeneracionDeCodigoQRConUsuarioNoValido()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generación de código QR con usuario no válido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 28
    testRunner.Given("que mi token JWT no contiene un ID de usuario válido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 29
    testRunner.When("solicito generar mi código QR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Cuando ");
#line hidden
#line 30
    testRunner.Then("debería recibir un error \"ID de usuario no válido\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entonces ");
#line hidden
#line 31
    testRunner.And("no debería generarse ningún código QR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Y ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generación de código QR para estudiante no encontrado")]
        [Xunit.TraitAttribute("FeatureTitle", "Generación de Código QR para Estudiantes")]
        [Xunit.TraitAttribute("Description", "Generación de código QR para estudiante no encontrado")]
        public void GeneracionDeCodigoQRParaEstudianteNoEncontrado()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generación de código QR para estudiante no encontrado", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 34
    testRunner.Given("que mi ID de usuario es \"999\" pero no existo en la base de datos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 35
    testRunner.When("solicito generar mi código QR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Cuando ");
#line hidden
#line 36
    testRunner.Then("debería recibir un error \"Estudiante no encontrado\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entonces ");
#line hidden
#line 37
    testRunner.And("no debería generarse ningún código QR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Y ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verificación de duración del código QR")]
        [Xunit.TraitAttribute("FeatureTitle", "Generación de Código QR para Estudiantes")]
        [Xunit.TraitAttribute("Description", "Verificación de duración del código QR")]
        public void VerificacionDeDuracionDelCodigoQR()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verificación de duración del código QR", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 40
    testRunner.Given("que he generado un código QR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 41
    testRunner.When("pasan 5 minutos desde la generación", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Cuando ");
#line hidden
#line 42
    testRunner.Then("el código QR debería considerarse expirado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entonces ");
#line hidden
#line 43
    testRunner.And("debería necesitar regenerar un nuevo código QR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Y ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GeneracionDeCodigoQRParaEstudiantesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GeneracionDeCodigoQRParaEstudiantesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
